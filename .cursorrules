# Church Management System Architecture Guide

## Core Features & Organization

1. Authentication & User Management
   - Based on Supabase Auth with custom profiles table
   - Role hierarchy: superadmin > church_admin > staff > group_leader > member > visitor
   - Each user belongs to one church (except superadmin)
   - JWT claims include church_id and role for RLS

2. Multi-tenancy
   - Each church is a separate tenant
   - Data isolation through church_id and RLS policies
   - Shared database with row-level security
   - Church-specific customization through settings JSON field

3. Feature Organization
   /src/features/
   ├─ auth/                    # Authentication & authorization
   ├─ churches/                # Church management
   ├─ members/                 # Member management
   ├─ events/                  # Event management
   ├─ announcements/           # Announcement system
   ├─ groups/                  # Small groups/ministry teams
   └─ common/                  # Shared components & utilities

4. Database Schema
   - profiles
     • user_id: UUID (FK to auth.users)
     • church_id: UUID (FK to churches)
     • role: TEXT (enum)
     • status: TEXT (active/pending/inactive)
     • display_name: TEXT
     • email: TEXT
     • avatar_url: TEXT
     • phone_number: TEXT
     • last_active_at: TIMESTAMP

   - churches
     • id: UUID
     • name: TEXT
     • domain_name: TEXT
     • logo_url: TEXT
     • settings: JSON
     • stripe_customer_id: TEXT
     • subscription_status: TEXT
     • timezone: TEXT

5. Access Control Rules
   - RLS Policies based on:
     • User's church_id
     • User's role
     • Resource ownership
   - JWT claims for efficient policy enforcement
   - Role-based feature access

6. Development Guidelines
   - Use server components by default
   - Client components only when necessary (marked with 'use client')
   - Implement proper loading and error states
   - Follow TypeScript strict mode
   - Use Zod for validation
   - Keep components small and focused

7. Feature Implementation Pattern
   /features/[feature-name]/
   ├─ components/              # React components
   ├─ actions.ts              # Server actions
   ├─ types.ts                # TypeScript types
   ├─ queries.ts              # Database queries
   ├─ schemas.ts              # Zod schemas
   └─ utils.ts                # Helper functions

8. Authentication Flow
   - Superadmin creates church
   - Superadmin invites church admin
   - Church admin invites staff/members
   - Members sign up with invite link
   - JWT contains role and church_id
   - RLS enforces access control

9. Error Handling
   - Use custom error types
   - Implement proper error boundaries
   - Log errors to audit_logs table
   - Show user-friendly error messages

10. Testing Strategy
    - Unit tests for utilities
    - Integration tests for features
    - E2E tests for critical flows
    - Test different role permissions

11. Performance Considerations
    - Use proper indexes
    - Implement caching where needed
    - Optimize queries with proper joins
    - Use connection pooling

12. Security Measures
    - Always use RLS
    - Validate all inputs
    - Sanitize all outputs
    - Audit sensitive operations
    - Rate limit API endpoints

Remember:
- Keep feature folders isolated and self-contained
- Use TypeScript for better type safety
- Follow React Server Components patterns
- Implement proper error handling
- Document complex logic
- Write tests for critical paths